import postgres from 'postgres';

const databaseUrl = process.env.SUPABASE_DATABASE_URL;

if (!databaseUrl) {
  console.error('‚ùå SUPABASE_DATABASE_URL n√£o encontrada');
  process.exit(1);
}

// Extrair senha da URL e reconstruir
const urlParts = databaseUrl.match(/postgresql:\/\/postgres:(.+)@(.+)/);
if (!urlParts) {
  console.error('‚ùå URL do banco inv√°lida');
  process.exit(1);
}

async function setupDatabase() {
  console.log('üöÄ Conectando ao PostgreSQL do Supabase...\n');
  
  const sql = postgres(databaseUrl.replace('[YOUR-PASSWORD]', urlParts[1]), {
    ssl: 'require'
  });

  try {
    // 1. Criar tabela plans
    console.log('1Ô∏è‚É£ Criando tabela plans...');
    await sql`
      CREATE TABLE IF NOT EXISTS plans (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        price TEXT NOT NULL,
        period TEXT NOT NULL DEFAULT '/m√™s',
        description TEXT,
        dependents INTEGER NOT NULL DEFAULT 1,
        popular BOOLEAN NOT NULL DEFAULT false,
        active BOOLEAN NOT NULL DEFAULT true,
        image TEXT,
        features TEXT[] NOT NULL,
        display_order INTEGER NOT NULL DEFAULT 0,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `;
    console.log('   ‚úÖ Tabela plans criada\n');

    // 2. Criar tabela profiles
    console.log('2Ô∏è‚É£ Criando tabela profiles...');
    await sql`
      CREATE TABLE IF NOT EXISTS profiles (
        id UUID PRIMARY KEY,
        email TEXT NOT NULL UNIQUE,
        full_name TEXT,
        phone TEXT,
        role TEXT NOT NULL DEFAULT 'client',
        plan_id INTEGER REFERENCES plans(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `;
    console.log('   ‚úÖ Tabela profiles criada\n');

    // 3. Habilitar RLS
    console.log('3Ô∏è‚É£ Habilitando RLS...');
    await sql`ALTER TABLE profiles ENABLE ROW LEVEL SECURITY`;
    await sql`ALTER TABLE plans ENABLE ROW LEVEL SECURITY`;
    console.log('   ‚úÖ RLS habilitado\n');

    // 4. Criar pol√≠ticas
    console.log('4Ô∏è‚É£ Criando pol√≠ticas de seguran√ßa...');
    await sql`
      DROP POLICY IF EXISTS "Users can read own profile" ON profiles;
      CREATE POLICY "Users can read own profile" ON profiles FOR SELECT USING (auth.uid() = id)
    `;
    await sql`
      DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
      CREATE POLICY "Users can update own profile" ON profiles FOR UPDATE USING (auth.uid() = id)
    `;
    await sql`
      DROP POLICY IF EXISTS "Enable insert for authenticated users" ON profiles;
      CREATE POLICY "Enable insert for authenticated users" ON profiles FOR INSERT WITH CHECK (auth.uid() = id)
    `;
    await sql`
      DROP POLICY IF EXISTS "Anyone can read active plans" ON plans;
      CREATE POLICY "Anyone can read active plans" ON plans FOR SELECT USING (active = true)
    `;
    console.log('   ‚úÖ Pol√≠ticas criadas\n');

    // 5. Criar fun√ß√£o e trigger
    console.log('5Ô∏è‚É£ Criando trigger para perfis autom√°ticos...');
    await sql`
      CREATE OR REPLACE FUNCTION public.handle_new_user() 
      RETURNS TRIGGER AS $$
      BEGIN
        INSERT INTO public.profiles (id, email, role)
        VALUES (NEW.id, NEW.email, 'client');
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER
    `;
    await sql`DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users`;
    await sql`
      CREATE TRIGGER on_auth_user_created
        AFTER INSERT ON auth.users
        FOR EACH ROW EXECUTE FUNCTION public.handle_new_user()
    `;
    console.log('   ‚úÖ Trigger criado\n');

    // 6. Inserir planos
    console.log('6Ô∏è‚É£ Inserindo planos iniciais...');
    await sql`DELETE FROM plans`;
    await sql`
      INSERT INTO plans (name, price, period, description, dependents, popular, active, image, features, display_order)
      VALUES 
        (
          'Plano B√°sico',
          'R$ 89,90',
          '/m√™s',
          'Prote√ß√£o individual com servi√ßos essenciais de funeral',
          1,
          false,
          true,
          'https://images.unsplash.com/photo-1490750967868-88aa4486c946?w=800&h=600&fit=crop',
          ARRAY['Cobertura individual', 'Vel√≥rio 24h', 'Sepultamento', 'Transporte local', 'Assist√™ncia documental'],
          1
        ),
        (
          'Plano Essencial',
          'R$ 149,90',
          '/m√™s',
          'Prote√ß√£o para voc√™ e sua fam√≠lia com servi√ßos completos',
          3,
          true,
          true,
          'https://images.unsplash.com/photo-1522673607200-164d1b6ce486?w=800&h=600&fit=crop',
          ARRAY['At√© 3 dependentes', 'Vel√≥rio premium', 'Crema√ß√£o ou sepultamento', 'Transporte estadual', 'Floricultura inclusa', 'Assist√™ncia psicol√≥gica'],
          2
        ),
        (
          'Plano Premium',
          'R$ 249,90',
          '/m√™s',
          'Prote√ß√£o familiar ampliada com servi√ßos premium e personalizados',
          6,
          false,
          true,
          'https://images.unsplash.com/photo-1518709414768-a88981a4515d?w=800&h=600&fit=crop',
          ARRAY['At√© 6 dependentes', 'Vel√≥rio VIP', 'Crema√ß√£o e sepultamento', 'Transporte nacional', 'Floricultura premium', 'Assist√™ncia jur√≠dica', 'Cerim√¥nia personalizada', 'Memorial digital'],
          3
        )
    `;
    console.log('   ‚úÖ 3 planos inseridos\n');

    // 7. Verificar
    const plans = await sql`SELECT * FROM plans ORDER BY display_order`;
    console.log('‚úÖ SUCESSO! Configura√ß√£o completa!\n');
    console.log('üìä Planos criados:');
    plans.forEach(plan => {
      console.log(`   ${plan.popular ? '‚≠ê' : '  '} ${plan.name} - ${plan.price}`);
    });

    console.log('\nüéØ PR√ìXIMO PASSO - Criar usu√°rio admin:');
    console.log('   1. V√° em https://supabase.com/dashboard');
    console.log('   2. Authentication > Users > Add User');
    console.log('   3. Email: admin@grupodapaz.com');
    console.log('   4. Crie uma senha e marque "Auto Confirm User"');
    console.log('   5. Depois me avise para tornar ele admin!\n');

    await sql.end();
    process.exit(0);

  } catch (error: any) {
    console.error('‚ùå Erro:', error.message);
    await sql.end();
    process.exit(1);
  }
}

setupDatabase();
